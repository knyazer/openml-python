
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/30_extended/fetch_runtimes_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_30_extended_fetch_runtimes_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_30_extended_fetch_runtimes_tutorial.py:


==========================================
Measuring runtimes for Scikit-learn models
==========================================

The runtime of machine learning models on specific datasets can be a deciding
factor on the choice of algorithms, especially for benchmarking and comparison
purposes. OpenML's scikit-learn extension provides runtime data from runs of
model fit and prediction on tasks or datasets, for both the CPU-clock as well
as the actual wallclock-time incurred. The objective of this example is to
illustrate how to retrieve such timing measures, and also offer some potential
means of usage and interpretation of the same.

It should be noted that there are multiple levels at which parallelism can occur.

* At the outermost level, OpenML tasks contain fixed data splits, on which the
  defined model/flow is executed. Thus, a model can be fit on each OpenML dataset fold
  in parallel using the `n_jobs` parameter to `run_model_on_task` or `run_flow_on_task`
  (illustrated under Case 2 & 3 below).

* The model/flow specified can also include scikit-learn models that perform their own
  parallelization. For instance, by specifying `n_jobs` in a Random Forest model definition
  (covered under Case 2 below).

* The sklearn model can further be an HPO estimator and contain it's own parallelization.
  If the base estimator used also supports `parallelization`, then there's at least a 2-level nested
  definition for parallelization possible (covered under Case 3 below).

We shall cover these 5 representative scenarios for:

* (Case 1) Retrieving runtimes for Random Forest training and prediction on each of the
  cross-validation folds

* (Case 2) Testing the above setting in a parallel setup and monitor the difference using
  runtimes retrieved

* (Case 3) Comparing RandomSearchCV and GridSearchCV on the above task based on runtimes

* (Case 4) Running models that don't run in parallel or models which scikit-learn doesn't
  parallelize

* (Case 5) Running models that do not release the Python Global Interpreter Lock (GIL)

.. GENERATED FROM PYTHON SOURCE LINES 47-62

.. code-block:: Python


    # License: BSD 3-Clause

    import openml
    import numpy as np
    from matplotlib import pyplot as plt
    from joblib.parallel import parallel_backend

    from sklearn.naive_bayes import GaussianNB
    from sklearn.tree import DecisionTreeClassifier
    from sklearn.neural_network import MLPClassifier
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import GridSearchCV, RandomizedSearchCV









.. GENERATED FROM PYTHON SOURCE LINES 63-65

Preparing tasks and scikit-learn models
***************************************

.. GENERATED FROM PYTHON SOURCE LINES 65-94

.. code-block:: Python


    task_id = 167119

    task = openml.tasks.get_task(task_id)
    print(task)

    # Viewing associated data
    n_repeats, n_folds, n_samples = task.get_split_dimensions()
    print(
        "Task {}: number of repeats: {}, number of folds: {}, number of samples {}.".format(
            task_id,
            n_repeats,
            n_folds,
            n_samples,
        )
    )


    # Creating utility function
    def print_compare_runtimes(measures):
        for repeat, val1 in measures["usercpu_time_millis_training"].items():
            for fold, val2 in val1.items():
                print(
                    "Repeat #{}-Fold #{}: CPU-{:.3f} vs Wall-{:.3f}".format(
                        repeat, fold, val2, measures["wall_clock_time_millis_training"][repeat][fold]
                    )
                )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/sphinx_gallery/gen_rst.py:722: FutureWarning: Starting from Version 0.15.0 `download_splits` will default to ``False`` instead of ``True`` and be independent from `download_data`. To disable this message until version 0.15 explicitly set `download_splits` to a bool.
      exec(self.code, self.fake_main.__dict__)
    /home/runner/work/openml-python/openml-python/openml/tasks/functions.py:442: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      dataset = get_dataset(task.dataset_id, *dataset_args, **get_dataset_kwargs)
    OpenML Classification Task
    ==========================
    Task Type Description: https://www.openml.org/tt/TaskType.SUPERVISED_CLASSIFICATION
    Task ID..............: 167119
    Task URL.............: https://www.openml.org/t/167119
    Estimation Procedure.: crossvalidation
    Target Feature.......: class
    # of Classes.........: 3
    Cost Matrix..........: Available
    Task 167119: number of repeats: 1, number of folds: 10, number of samples 1.




.. GENERATED FROM PYTHON SOURCE LINES 95-100

Case 1: Running a Random Forest model on an OpenML task
*******************************************************
We'll run a Random Forest model and obtain an OpenML run object. We can
see the evaluations recorded per fold for the dataset and the information
available for this run.

.. GENERATED FROM PYTHON SOURCE LINES 100-125

.. code-block:: Python


    clf = RandomForestClassifier(n_estimators=10)

    run1 = openml.runs.run_model_on_task(
        model=clf,
        task=task,
        upload_flow=False,
        avoid_duplicate_runs=False,
    )
    measures = run1.fold_evaluations

    print("The timing and performance metrics available: ")
    for key in measures.keys():
        print(key)
    print()

    print(
        "The performance metric is recorded under `predictive_accuracy` per "
        "fold and can be retrieved as: "
    )
    for repeat, val1 in measures["predictive_accuracy"].items():
        for fold, val2 in val1.items():
            print("Repeat #{}-Fold #{}: {:.4f}".format(repeat, fold, val2))
        print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    The timing and performance metrics available: 
    usercpu_time_millis_training
    wall_clock_time_millis_training
    usercpu_time_millis_testing
    usercpu_time_millis
    wall_clock_time_millis_testing
    wall_clock_time_millis
    predictive_accuracy

    The performance metric is recorded under `predictive_accuracy` per fold and can be retrieved as: 
    Repeat #0-Fold #0: 0.7829
    Repeat #0-Fold #1: 0.7697
    Repeat #0-Fold #2: 0.7876
    Repeat #0-Fold #3: 0.7970
    Repeat #0-Fold #4: 0.7887
    Repeat #0-Fold #5: 0.7876
    Repeat #0-Fold #6: 0.7805
    Repeat #0-Fold #7: 0.7827
    Repeat #0-Fold #8: 0.7854
    Repeat #0-Fold #9: 0.7802





.. GENERATED FROM PYTHON SOURCE LINES 126-139

The remaining entries recorded in `measures` are the runtime records
related as:

usercpu_time_millis = usercpu_time_millis_training + usercpu_time_millis_testing

wall_clock_time_millis = wall_clock_time_millis_training + wall_clock_time_millis_testing

The timing measures recorded as `*_millis_training` contain the per
repeat-per fold timing incurred for the execution of the `.fit()` procedure
of the model. For `usercpu_time_*` the time recorded using `time.process_time()`
is converted to `milliseconds` and stored. Similarly, `time.time()` is used
to record the time entry for `wall_clock_time_*`. The `*_millis_testing` entry
follows the same procedure but for time taken for the `.predict()` procedure.

.. GENERATED FROM PYTHON SOURCE LINES 139-143

.. code-block:: Python


    # Comparing the CPU and wall-clock training times of the Random Forest model
    print_compare_runtimes(measures)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Repeat #0-Fold #0: CPU-235.977 vs Wall-235.979
    Repeat #0-Fold #1: CPU-238.127 vs Wall-238.137
    Repeat #0-Fold #2: CPU-236.583 vs Wall-236.619
    Repeat #0-Fold #3: CPU-239.582 vs Wall-239.514
    Repeat #0-Fold #4: CPU-236.329 vs Wall-236.347
    Repeat #0-Fold #5: CPU-236.865 vs Wall-236.894
    Repeat #0-Fold #6: CPU-235.116 vs Wall-235.140
    Repeat #0-Fold #7: CPU-238.205 vs Wall-237.167
    Repeat #0-Fold #8: CPU-233.175 vs Wall-233.186
    Repeat #0-Fold #9: CPU-235.572 vs Wall-235.613




.. GENERATED FROM PYTHON SOURCE LINES 144-147

Case 2: Running Scikit-learn model on an OpenML task in parallel
****************************************************************
Redefining the model to allow parallelism with `n_jobs=2` (2 cores)

.. GENERATED FROM PYTHON SOURCE LINES 147-157

.. code-block:: Python


    clf = RandomForestClassifier(n_estimators=10, n_jobs=2)

    run2 = openml.runs.run_model_on_task(
        model=clf, task=task, upload_flow=False, avoid_duplicate_runs=False
    )
    measures = run2.fold_evaluations
    # The wall-clock time recorded per fold should be lesser than Case 1 above
    print_compare_runtimes(measures)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    Repeat #0-Fold #0: CPU-261.539 vs Wall-163.155
    Repeat #0-Fold #1: CPU-255.664 vs Wall-153.682
    Repeat #0-Fold #2: CPU-260.734 vs Wall-152.796
    Repeat #0-Fold #3: CPU-256.697 vs Wall-153.356
    Repeat #0-Fold #4: CPU-260.347 vs Wall-153.035
    Repeat #0-Fold #5: CPU-250.233 vs Wall-152.623
    Repeat #0-Fold #6: CPU-249.096 vs Wall-142.550
    Repeat #0-Fold #7: CPU-248.325 vs Wall-152.744
    Repeat #0-Fold #8: CPU-262.139 vs Wall-152.674
    Repeat #0-Fold #9: CPU-248.546 vs Wall-142.334




.. GENERATED FROM PYTHON SOURCE LINES 158-159

Running a Random Forest model on an OpenML task in parallel (all cores available):

.. GENERATED FROM PYTHON SOURCE LINES 159-172

.. code-block:: Python


    # Redefining the model to use all available cores with `n_jobs=-1`
    clf = RandomForestClassifier(n_estimators=10, n_jobs=-1)

    run3 = openml.runs.run_model_on_task(
        model=clf, task=task, upload_flow=False, avoid_duplicate_runs=False
    )
    measures = run3.fold_evaluations
    # The wall-clock time recorded per fold should be lesser than the case above,
    # if more than 2 CPU cores are available. The speed-up is more pronounced for
    # larger datasets.
    print_compare_runtimes(measures)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    Repeat #0-Fold #0: CPU-309.611 vs Wall-117.078
    Repeat #0-Fold #1: CPU-309.014 vs Wall-119.244
    Repeat #0-Fold #2: CPU-316.596 vs Wall-120.125
    Repeat #0-Fold #3: CPU-314.740 vs Wall-126.740
    Repeat #0-Fold #4: CPU-308.329 vs Wall-120.864
    Repeat #0-Fold #5: CPU-313.615 vs Wall-119.511
    Repeat #0-Fold #6: CPU-310.350 vs Wall-119.803
    Repeat #0-Fold #7: CPU-313.557 vs Wall-119.791
    Repeat #0-Fold #8: CPU-317.739 vs Wall-125.700
    Repeat #0-Fold #9: CPU-307.035 vs Wall-116.972




.. GENERATED FROM PYTHON SOURCE LINES 173-178

We can now observe that the ratio of CPU time to wallclock time is lower
than in case 1. This happens because joblib by default spawns subprocesses
for the workloads for which CPU time cannot be tracked. Therefore, interpreting
the reported CPU and wallclock time requires knowledge of the parallelization
applied at runtime.

.. GENERATED FROM PYTHON SOURCE LINES 180-184

Running the same task with a different parallel backend. Joblib provides multiple
backends: {`loky` (default), `multiprocessing`, `dask`, `threading`, `sequential`}.
The backend can be explicitly set using a joblib context manager. The behaviour of
the job distribution can change and therefore the scale of runtimes recorded too.

.. GENERATED FROM PYTHON SOURCE LINES 184-192

.. code-block:: Python


    with parallel_backend(backend="multiprocessing", n_jobs=-1):
        run3_ = openml.runs.run_model_on_task(
            model=clf, task=task, upload_flow=False, avoid_duplicate_runs=False
        )
    measures = run3_.fold_evaluations
    print_compare_runtimes(measures)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    Repeat #0-Fold #0: CPU-374.415 vs Wall-338.322
    Repeat #0-Fold #1: CPU-370.139 vs Wall-373.694
    Repeat #0-Fold #2: CPU-372.012 vs Wall-315.575
    Repeat #0-Fold #3: CPU-374.445 vs Wall-397.432
    Repeat #0-Fold #4: CPU-357.398 vs Wall-308.939
    Repeat #0-Fold #5: CPU-357.932 vs Wall-308.096
    Repeat #0-Fold #6: CPU-373.024 vs Wall-358.967
    Repeat #0-Fold #7: CPU-373.518 vs Wall-370.264
    Repeat #0-Fold #8: CPU-373.836 vs Wall-210.091
    Repeat #0-Fold #9: CPU-356.216 vs Wall-224.467




.. GENERATED FROM PYTHON SOURCE LINES 193-200

The CPU time interpretation becomes ambiguous when jobs are distributed over an
unknown number of cores or when subprocesses are spawned for which the CPU time
cannot be tracked, as in the examples above. It is impossible for OpenML-Python
to capture the availability of the number of cores/threads, their eventual
utilisation and whether workloads are executed in subprocesses, for various
cases that can arise as demonstrated in the rest of the example. Therefore,
the final interpretation of the runtimes is left to the `user`.

.. GENERATED FROM PYTHON SOURCE LINES 202-210

Case 3: Running and benchmarking HPO algorithms with their runtimes
*******************************************************************
We shall now optimize a similar RandomForest model for the same task using
scikit-learn's HPO support by using GridSearchCV to optimize our earlier
RandomForest model's hyperparameter `n_estimators`. Scikit-learn also provides a
`refit_time_` for such HPO models, i.e., the time incurred by training
and evaluating the model on the best found parameter setting. This is
included in the `wall_clock_time_millis_training` measure recorded.

.. GENERATED FROM PYTHON SOURCE LINES 210-231

.. code-block:: Python


    from sklearn.model_selection import GridSearchCV


    clf = RandomForestClassifier(n_estimators=10, n_jobs=2)

    # GridSearchCV model
    n_iter = 5
    grid_pipe = GridSearchCV(
        estimator=clf,
        param_grid={"n_estimators": np.linspace(start=1, stop=50, num=n_iter).astype(int).tolist()},
        cv=2,
        n_jobs=2,
    )

    run4 = openml.runs.run_model_on_task(
        model=grid_pipe, task=task, upload_flow=False, avoid_duplicate_runs=False, n_jobs=2
    )
    measures = run4.fold_evaluations
    print_compare_runtimes(measures)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    Repeat #0-Fold #0: CPU-5838.881 vs Wall-3237.719
    Repeat #0-Fold #1: CPU-5833.972 vs Wall-3227.245
    Repeat #0-Fold #2: CPU-6096.736 vs Wall-3348.156
    Repeat #0-Fold #3: CPU-6489.072 vs Wall-3544.448
    Repeat #0-Fold #4: CPU-5779.692 vs Wall-3306.056
    Repeat #0-Fold #5: CPU-5816.306 vs Wall-3306.117
    Repeat #0-Fold #6: CPU-5790.100 vs Wall-3245.712
    Repeat #0-Fold #7: CPU-5785.861 vs Wall-3203.885
    Repeat #0-Fold #8: CPU-6490.670 vs Wall-3635.882
    Repeat #0-Fold #9: CPU-5831.836 vs Wall-3313.843




.. GENERATED FROM PYTHON SOURCE LINES 232-243

Like any optimisation problem, scikit-learn's HPO estimators also generate
a sequence of configurations which are evaluated, using which the best found
configuration is tracked throughout the trace.
The OpenML run object stores these traces as OpenMLRunTrace objects accessible
using keys of the pattern (repeat, fold, iterations). Here `fold` implies the
outer-cross validation fold as obtained from the task data splits in OpenML.
GridSearchCV here performs grid search over the inner-cross validation folds as
parameterized by the `cv` parameter. Since `GridSearchCV` in this example performs a
`2-fold` cross validation, the runtime recorded per repeat-per fold in the run object
is for the entire `fit()` procedure of GridSearchCV thus subsuming the runtimes of
the 2-fold (inner) CV search performed.

.. GENERATED FROM PYTHON SOURCE LINES 243-250

.. code-block:: Python


    # We earlier extracted the number of repeats and folds for this task:
    print("# repeats: {}\n# folds: {}".format(n_repeats, n_folds))

    # To extract the training runtime of the first repeat, first fold:
    print(run4.fold_evaluations["wall_clock_time_millis_training"][0][0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    # repeats: 1
    # folds: 10
    3237.7190589904785




.. GENERATED FROM PYTHON SOURCE LINES 251-254

To extract the training runtime of the 1-st repeat, 4-th (outer) fold and also
to fetch the parameters and performance of the evaluations made during
the 1-st repeat, 4-th fold evaluation by the Grid Search model.

.. GENERATED FROM PYTHON SOURCE LINES 254-271

.. code-block:: Python


    _repeat = 0
    _fold = 3
    print(
        "Total runtime for repeat {}'s fold {}: {:4f} ms".format(
            _repeat, _fold, run4.fold_evaluations["wall_clock_time_millis_training"][_repeat][_fold]
        )
    )
    for i in range(n_iter):
        key = (_repeat, _fold, i)
        r = run4.trace.trace_iterations[key]
        print(
            "n_estimators: {:>2} - score: {:.3f}".format(
                r.parameters["parameter_n_estimators"], r.evaluation
            )
        )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Total runtime for repeat 0's fold 3: 3544.447660 ms
    n_estimators:  1 - score: 0.763
    n_estimators: 13 - score: 0.803
    n_estimators: 25 - score: 0.803
    n_estimators: 37 - score: 0.804
    n_estimators: 50 - score: 0.804




.. GENERATED FROM PYTHON SOURCE LINES 272-284

Scikit-learn's HPO estimators also come with an argument `refit=True` as a default.
In our previous model definition it was set to True by default, which meant that the best
found hyperparameter configuration was used to refit or retrain the model without any inner
cross validation. This extra refit time measure is provided by the scikit-learn model as the
attribute `refit_time_`.
This time is included in the `wall_clock_time_millis_training` measure.

For non-HPO estimators, `wall_clock_time_millis = wall_clock_time_millis_training + wall_clock_time_millis_testing`.

For HPO estimators, `wall_clock_time_millis = wall_clock_time_millis_training + wall_clock_time_millis_testing + refit_time`.

This refit time can therefore be explicitly extracted in this manner:

.. GENERATED FROM PYTHON SOURCE LINES 284-303

.. code-block:: Python



    def extract_refit_time(run, repeat, fold):
        refit_time = (
            run.fold_evaluations["wall_clock_time_millis"][repeat][fold]
            - run.fold_evaluations["wall_clock_time_millis_training"][repeat][fold]
            - run.fold_evaluations["wall_clock_time_millis_testing"][repeat][fold]
        )
        return refit_time


    for repeat in range(n_repeats):
        for fold in range(n_folds):
            print(
                "Repeat #{}-Fold #{}: {:.4f}".format(
                    repeat, fold, extract_refit_time(run4, repeat, fold)
                )
            )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Repeat #0-Fold #0: 426.5790
    Repeat #0-Fold #1: 422.7734
    Repeat #0-Fold #2: 597.7449
    Repeat #0-Fold #3: 779.7282
    Repeat #0-Fold #4: 417.8469
    Repeat #0-Fold #5: 417.8824
    Repeat #0-Fold #6: 438.0898
    Repeat #0-Fold #7: 424.8953
    Repeat #0-Fold #8: 800.3263
    Repeat #0-Fold #9: 420.0780




.. GENERATED FROM PYTHON SOURCE LINES 304-308

Along with the GridSearchCV already used above, we demonstrate how such
optimisation traces can be retrieved by showing an application of these
traces - comparing the speed of finding the best configuration using
RandomizedSearchCV and GridSearchCV available with scikit-learn.

.. GENERATED FROM PYTHON SOURCE LINES 308-323

.. code-block:: Python


    # RandomizedSearchCV model
    rs_pipe = RandomizedSearchCV(
        estimator=clf,
        param_distributions={
            "n_estimators": np.linspace(start=1, stop=50, num=15).astype(int).tolist()
        },
        cv=2,
        n_iter=n_iter,
        n_jobs=2,
    )
    run5 = openml.runs.run_model_on_task(
        model=rs_pipe, task=task, upload_flow=False, avoid_duplicate_runs=False, n_jobs=2
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)




.. GENERATED FROM PYTHON SOURCE LINES 324-335

Since for the call to ``openml.runs.run_model_on_task`` the parameter
``n_jobs`` is set to its default ``None``, the evaluations across the OpenML folds
are not parallelized. Hence, the time recorded is agnostic to the ``n_jobs``
being set at both the HPO estimator ``GridSearchCV`` as well as the base
estimator ``RandomForestClassifier`` in this case. The OpenML extension only records the
time taken for the completion of the complete ``fit()`` call, per-repeat per-fold.

This notion can be used to extract and plot the best found performance per
fold by the HPO model and the corresponding time taken for search across
that fold. Moreover, since ``n_jobs=None`` for ``openml.runs.run_model_on_task``
the runtimes per fold can be cumulatively added to plot the trace against time.

.. GENERATED FROM PYTHON SOURCE LINES 335-379

.. code-block:: Python



    def extract_trace_data(run, n_repeats, n_folds, n_iter, key=None):
        key = "wall_clock_time_millis_training" if key is None else key
        data = {"score": [], "runtime": []}
        for i_r in range(n_repeats):
            for i_f in range(n_folds):
                data["runtime"].append(run.fold_evaluations[key][i_r][i_f])
                for i_i in range(n_iter):
                    r = run.trace.trace_iterations[(i_r, i_f, i_i)]
                    if r.selected:
                        data["score"].append(r.evaluation)
                        break
        return data


    def get_incumbent_trace(trace):
        best_score = 1
        inc_trace = []
        for i, r in enumerate(trace):
            if i == 0 or (1 - r) < best_score:
                best_score = 1 - r
            inc_trace.append(best_score)
        return inc_trace


    grid_data = extract_trace_data(run4, n_repeats, n_folds, n_iter)
    rs_data = extract_trace_data(run5, n_repeats, n_folds, n_iter)

    plt.clf()
    plt.plot(
        np.cumsum(grid_data["runtime"]), get_incumbent_trace(grid_data["score"]), label="Grid Search"
    )
    plt.plot(
        np.cumsum(rs_data["runtime"]), get_incumbent_trace(rs_data["score"]), label="Random Search"
    )
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("Wallclock time (in milliseconds)")
    plt.ylabel("1 - Accuracy")
    plt.title("Optimisation Trace Comparison")
    plt.legend()
    plt.show()




.. image-sg:: /examples/30_extended/images/sphx_glr_fetch_runtimes_tutorial_001.png
   :alt: Optimisation Trace Comparison
   :srcset: /examples/30_extended/images/sphx_glr_fetch_runtimes_tutorial_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 380-388

Case 4: Running models that scikit-learn doesn't parallelize
*************************************************************
Both scikit-learn and OpenML depend on parallelism implemented through `joblib`.
However, there can be cases where either models cannot be parallelized or don't
depend on joblib for its parallelism. 2 such cases are illustrated below.

Running a Decision Tree model that doesn't support parallelism implicitly, but
using OpenML to parallelize evaluations for the outer-cross validation folds.

.. GENERATED FROM PYTHON SOURCE LINES 388-397

.. code-block:: Python


    dt = DecisionTreeClassifier()

    run6 = openml.runs.run_model_on_task(
        model=dt, task=task, upload_flow=False, avoid_duplicate_runs=False, n_jobs=2
    )
    measures = run6.fold_evaluations
    print_compare_runtimes(measures)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    Repeat #0-Fold #0: CPU-85.271 vs Wall-85.657
    Repeat #0-Fold #1: CPU-86.087 vs Wall-86.104
    Repeat #0-Fold #2: CPU-83.738 vs Wall-83.739
    Repeat #0-Fold #3: CPU-82.712 vs Wall-82.713
    Repeat #0-Fold #4: CPU-83.590 vs Wall-83.590
    Repeat #0-Fold #5: CPU-83.206 vs Wall-83.207
    Repeat #0-Fold #6: CPU-85.197 vs Wall-85.214
    Repeat #0-Fold #7: CPU-83.684 vs Wall-83.685
    Repeat #0-Fold #8: CPU-83.640 vs Wall-83.648
    Repeat #0-Fold #9: CPU-84.690 vs Wall-84.707




.. GENERATED FROM PYTHON SOURCE LINES 398-401

Although the decision tree does not run in parallel, it can release the
`Python GIL <https://docs.python.org/dev/glossary.html#term-global-interpreter-lock>`_.
This can result in surprising runtime measures as demonstrated below:

.. GENERATED FROM PYTHON SOURCE LINES 401-409

.. code-block:: Python


    with parallel_backend("threading", n_jobs=-1):
        run7 = openml.runs.run_model_on_task(
            model=dt, task=task, upload_flow=False, avoid_duplicate_runs=False
        )
    measures = run7.fold_evaluations
    print_compare_runtimes(measures)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    Repeat #0-Fold #0: CPU-373.387 vs Wall-174.295
    Repeat #0-Fold #1: CPU-352.882 vs Wall-145.979
    Repeat #0-Fold #2: CPU-379.962 vs Wall-174.949
    Repeat #0-Fold #3: CPU-383.266 vs Wall-173.841
    Repeat #0-Fold #4: CPU-373.730 vs Wall-172.226
    Repeat #0-Fold #5: CPU-372.821 vs Wall-170.287
    Repeat #0-Fold #6: CPU-377.347 vs Wall-173.009
    Repeat #0-Fold #7: CPU-378.901 vs Wall-175.401
    Repeat #0-Fold #8: CPU-168.927 vs Wall-112.160
    Repeat #0-Fold #9: CPU-154.865 vs Wall-97.459




.. GENERATED FROM PYTHON SOURCE LINES 410-413

Running a Neural Network from scikit-learn that uses scikit-learn independent
parallelism using libraries such as `MKL, OpenBLAS or BLIS
<https://scikit-learn.org/stable/computing/parallelism.html#parallel-numpy-and-scipy-routines-from-numerical-libraries>`_.

.. GENERATED FROM PYTHON SOURCE LINES 413-422

.. code-block:: Python


    mlp = MLPClassifier(max_iter=10)

    run8 = openml.runs.run_model_on_task(
        model=mlp, task=task, upload_flow=False, avoid_duplicate_runs=False
    )
    measures = run8.fold_evaluations
    print_compare_runtimes(measures)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.
      warnings.warn(
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.
      warnings.warn(
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.
      warnings.warn(
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.
      warnings.warn(
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.
      warnings.warn(
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.
      warnings.warn(
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.
      warnings.warn(
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.
      warnings.warn(
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.
      warnings.warn(
    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    /home/runner/work/openml-python/openml-python/openml/runs/functions.py:789: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      openml.datasets.get_dataset(task.dataset_id).name,
    /opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.
      warnings.warn(
    Repeat #0-Fold #0: CPU-929.577 vs Wall-929.604
    Repeat #0-Fold #1: CPU-1263.526 vs Wall-977.199
    Repeat #0-Fold #2: CPU-1253.327 vs Wall-968.706
    Repeat #0-Fold #3: CPU-1257.954 vs Wall-972.322
    Repeat #0-Fold #4: CPU-1257.760 vs Wall-974.417
    Repeat #0-Fold #5: CPU-1255.668 vs Wall-970.721
    Repeat #0-Fold #6: CPU-1251.338 vs Wall-966.669
    Repeat #0-Fold #7: CPU-1253.479 vs Wall-969.573
    Repeat #0-Fold #8: CPU-1248.686 vs Wall-965.014
    Repeat #0-Fold #9: CPU-1251.591 vs Wall-968.405




.. GENERATED FROM PYTHON SOURCE LINES 423-430

Case 5: Running Scikit-learn models that don't release GIL
**********************************************************
Certain Scikit-learn models do not release the `Python GIL
<https://docs.python.org/dev/glossary.html#term-global-interpreter-lock>`_ and
are also not executed in parallel via a BLAS library. In such cases, the
CPU times and wallclock times are most likely trustworthy. Note however
that only very few models such as naive Bayes models are of this kind.

.. GENERATED FROM PYTHON SOURCE LINES 430-440

.. code-block:: Python


    clf = GaussianNB()

    with parallel_backend("multiprocessing", n_jobs=-1):
        run9 = openml.runs.run_model_on_task(
            model=clf, task=task, upload_flow=False, avoid_duplicate_runs=False
        )
    measures = run9.fold_evaluations
    print_compare_runtimes(measures)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/openml-python/openml-python/openml/tasks/task.py:150: FutureWarning: Starting from Version 0.15 `download_data`, `download_qualities`, and `download_features_meta_data` will all be ``False`` instead of ``True`` by default to enable lazy loading. To disable this message until version 0.15 explicitly set `download_data`, `download_qualities`, and `download_features_meta_data` to a bool while calling `get_dataset`.
      return datasets.get_dataset(self.dataset_id)
    Repeat #0-Fold #0: CPU-63.505 vs Wall-64.841
    Repeat #0-Fold #1: CPU-63.058 vs Wall-63.208
    Repeat #0-Fold #2: CPU-62.890 vs Wall-63.024
    Repeat #0-Fold #3: CPU-62.833 vs Wall-62.849
    Repeat #0-Fold #4: CPU-60.301 vs Wall-60.563
    Repeat #0-Fold #5: CPU-60.686 vs Wall-60.789
    Repeat #0-Fold #6: CPU-60.655 vs Wall-60.657
    Repeat #0-Fold #7: CPU-59.403 vs Wall-59.429
    Repeat #0-Fold #8: CPU-32.992 vs Wall-32.999
    Repeat #0-Fold #9: CPU-33.663 vs Wall-33.663




.. GENERATED FROM PYTHON SOURCE LINES 441-487

Summmary
*********
The scikit-learn extension for OpenML-Python records model runtimes for the
CPU-clock and the wall-clock times. The above examples illustrated how these
recorded runtimes can be extracted when using a scikit-learn model and under
parallel setups too. To summarize, the scikit-learn extension measures the:

* `CPU-time` & `wallclock-time` for the whole run

  * A run here corresponds to a call to `run_model_on_task` or `run_flow_on_task`
  * The recorded time is for the model fit for each of the outer-cross validations folds,
    i.e., the OpenML data splits

* Python's `time` module is used to compute the runtimes

  * `CPU-time` is recorded using the responses of `time.process_time()`
  * `wallclock-time` is recorded using the responses of `time.time()`

* The timings recorded by OpenML per outer-cross validation fold is agnostic to
  model parallelisation

  * The wallclock times reported in Case 2 above highlights the speed-up on using `n_jobs=-1`
    in comparison to `n_jobs=2`, since the timing recorded by OpenML is for the entire
    `fit()` procedure, whereas the parallelisation is performed inside `fit()` by scikit-learn
  * The CPU-time for models that are run in parallel can be difficult to interpret

* `CPU-time` & `wallclock-time` for each search per outer fold in an HPO run

  * Reports the total time for performing search on each of the OpenML data split, subsuming
    any sort of parallelism that happened as part of the HPO estimator or the underlying
    base estimator
  * Also allows extraction of the `refit_time` that scikit-learn measures using `time.time()`
    for retraining the model per outer fold, for the best found configuration

* `CPU-time` & `wallclock-time` for models that scikit-learn doesn't parallelize

  * Models like Decision Trees or naive Bayes don't parallelize and thus both the wallclock and
    CPU times are similar in runtime for the OpenML call
  * However, models implemented in Cython, such as the Decision Trees can release the GIL and
    still run in parallel if a `threading` backend is used by joblib.
  * Scikit-learn Neural Networks can undergo parallelization implicitly owing to thread-level
    parallelism involved in the linear algebraic operations and thus the wallclock-time and
    CPU-time can differ.

Because of all the cases mentioned above it is crucial to understand which case is triggered
when reporting runtimes for scikit-learn models measured with OpenML-Python!


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 6.664 seconds)


.. _sphx_glr_download_examples_30_extended_fetch_runtimes_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: fetch_runtimes_tutorial.ipynb <fetch_runtimes_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: fetch_runtimes_tutorial.py <fetch_runtimes_tutorial.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
